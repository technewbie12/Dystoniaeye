<!DOCTYPE html>
<html>
<head>
    <title>Advanced Face Tracking</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #1a1a1a;
            color: white;
            overflow-x: hidden;
        }
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 20px;
            font-family: Arial, sans-serif;
        }
        .video-container {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            justify-content: center;
        }
        .video-wrapper {
            position: relative;
            width: 100%;
            max-width: 854px;
        }
        #videoElement, #playbackVideo {
            width: 100%;
            background: #000;
            transform: rotate(90deg);
            transform-origin: center center;
            aspect-ratio: 10/16;
        }
        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            transform: rotate(90deg);
            transform-origin: center center;
            pointer-events: none;
        }
        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 1000;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 12px;
            backdrop-filter: blur(10px);
        }
        .stats {
            position: absolute;
            right: 10px;
            top: 10px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 10px;
            font-family: monospace;
            font-size: 12px;
            transform: rotate(90deg);
            transform-origin: right top;
            border-radius: 8px;
        }
        button {
            padding: 10px 20px;
            background: #2563eb;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        button:hover {
            background: #1d4ed8;
        }
        button:disabled {
            background: #4b5563;
            cursor: not-allowed;
        }
        .pose-data {
            position: fixed;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 8px;
            z-index: 1000;
            backdrop-filter: blur(10px);
        }
        .pose-data h3 {
            margin-top: 0;
            color: #60a5fa;
        }
        .emotion-panel {
            position: fixed;
            left: 20px;
            bottom: 20px;
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 8px;
            backdrop-filter: blur(10px);
            z-index: 1000;
        }
        .gesture-indicator {
            position: fixed;
            top: 80px;
            left: 20px;
            padding: 10px 20px;
            border-radius: 8px;
            font-family: monospace;
            background: rgba(34, 197, 94, 0.8);
            display: none;
        }
        .recording-indicator {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 10px 20px;
            border-radius: 8px;
            background: rgba(239, 68, 68, 0.8);
            display: none;
            animation: pulse 1.5s infinite;
        }
        .landmarks-label {
            position: absolute;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            pointer-events: none;
            display: none;
        }
        .fps-counter {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            padding: 10px;
            border-radius: 8px;
            font-family: monospace;
            backdrop-filter: blur(10px);
        }
        .detection-status {
            position: fixed;
            top: 20px;
            left: 20px;
            padding: 10px 20px;
            border-radius: 8px;
            font-family: monospace;
            transition: background-color 0.3s;
        }
        .detection-status.active {
            background: rgba(34, 197, 94, 0.8);
        }
        .detection-status.inactive {
            background: rgba(239, 68, 68, 0.8);
        }
        .settings-panel {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0,0,0,0.8);
            padding: 20px;
            border-radius: 8px;
            backdrop-filter: blur(10px);
            z-index: 1000;
        }
        .settings-panel label {
            display: block;
            margin-bottom: 10px;
        }
        .settings-panel input[type="checkbox"] {
            margin-right: 10px;
        }
        .settings-panel input[type="range"] {
            width: 100%;
            margin: 10px 0;
        }
        .download-btn {
            background: #22c55e;
            margin-top: 10px;
        }
        .download-btn:hover {
            background: #16a34a;
        }
        .toast {
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            font-family: Arial, sans-serif;
            opacity: 0;
            transition: opacity 0.3s;
            backdrop-filter: blur(10px);
            z-index: 2000;
        }
        .toast.show {
            opacity: 1;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        @media (orientation: portrait) {
            .orientation-message {
                display: block;
            }
        }
    </style>
</head>
<body>
    <div class="orientation-message">
        Please rotate your device to landscape mode for better face tracking
    </div>

    <div class="container">
        <div class="controls">
            <button id="startButton">Enable Webcam</button>
            <button id="recordButton" disabled>Start Recording</button>
            <button id="playButton" disabled>Play Recording</button>
            <span id="recordingTime"></span>
        </div>

        <div class="video-container">
            <div class="video-wrapper">
                <video id="videoElement" autoplay playsinline></video>
                <canvas id="overlay" class="overlay"></canvas>
                <div id="stats" class="stats"></div>
            </div>
            <div class="video-wrapper" style="display: none;" id="playbackWrapper">
                <video id="playbackVideo" playsinline></video>
                <canvas id="playbackOverlay" class="overlay"></canvas>
            </div>
        </div>

        <div class="pose-data">
            <h3>Head Pose Data</h3>
            <div id="poseData"></div>
        </div>

        <div class="emotion-panel">
            <h3>Emotion Detection</h3>
            <div id="emotionData"></div>
        </div>

        <div class="gesture-indicator" id="gestureIndicator">
            Gesture Detected: <span id="gestureType"></span>
        </div>

        <div class="recording-indicator" id="recordingIndicator">
            Recording in Progress
        </div>

        <div class="settings-panel">
            <h3>Settings</h3>
            <label>
                <input type="checkbox" id="showMesh" checked>
                Show Face Mesh
            </label>
            <label>
                <input type="checkbox" id="showAxes" checked>
                Show Pose Axes
            </label>
            <label>
                <input type="checkbox" id="mirrorVideo" checked>
                Mirror Video
            </label>
            <div>
                <label>Line Width</label>
                <input type="range" id="lineWidth" min="1" max="5" value="1">
            </div>
            <div>
                <label>Point Size</label>
                <input type="range" id="pointSize" min="1" max="5" value="1">
            </div>
            <button class="download-btn" id="downloadBtn" disabled>Download Recording</button>
        </div>

        <div class="fps-counter">FPS: <span id="fpsCounter">0</span></div>
        <div class="detection-status inactive" id="detectionStatus">No Face Detected</div>
        <div class="toast" id="toast"></div>
        <div id="landmarksLabels"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.11.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/face-landmarks-detection@0.0.3/dist/face-landmarks-detection.js"></script>

    <script>
        let video, model, overlay, playbackOverlay, ctx, playbackCtx;
        let recordButton, playButton, mediaRecorder, recordedChunks = [];
        let isRecording = false;
        let startTime, recordingInterval;
        let settings = {
            showMesh: true,
            showAxes: true,
            mirrorVideo: true,
            lineWidth: 1,
            pointSize: 1
        };
        let frameCount = 0;
        let lastTime = performance.now();

        async function loadModel() {
            model = await faceLandmarksDetection.load(
                faceLandmarksDetection.SupportedPackages.mediapipeFacemesh,
                { maxFaces: 1 }
            );
            return model;
        }

        async function setupCamera() {
            video = document.getElementById('videoElement');
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    'audio': false,
                    'video': {
                        facingMode: 'user',
                        width: { ideal: 1920 },
                        height: { ideal: 1200 },
                        frameRate: { ideal: 60 }
                    }
                });
                video.srcObject = stream;

                return new Promise((resolve) => {
                    video.onloadedmetadata = () => {
                        overlay = document.getElementById('overlay');
                        overlay.width = video.videoHeight;
                        overlay.height = video.videoWidth;
                        
                        const containerWidth = document.querySelector('.video-wrapper').offsetWidth;
                        const scale = containerWidth / video.videoHeight;
                        
                        video.style.transform = `rotate(90deg) scale(${scale})`;
                        overlay.style.transform = `rotate(90deg) scale(${scale})`;
                        
                        resolve(video);
                    };
                });
            } catch (error) {
                console.error('Error accessing camera:', error);
                showToast('Unable to access camera. Please ensure you have granted camera permissions.', 5000);
                throw error;
            }
        }

        function calculateHeadPose(prediction) {
            const nose = prediction.annotations.noseTip[0];
            const leftEye = prediction.annotations.leftEyeIris[0];
            const rightEye = prediction.annotations.rightEyeIris[0];

            const pitch = Math.atan2(nose[1] - leftEye[1], nose[2] - leftEye[2]) * 180 / Math.PI;
            const yaw = Math.atan2(nose[0] - rightEye[0], nose[2] - rightEye[2]) * 180 / Math.PI;
            const roll = Math.atan2(rightEye[1] - leftEye[1], rightEye[0] - leftEye[0]) * 180 / Math.PI;

            return {
                pitch: Math.round(pitch),
                yaw: Math.round(yaw),
                roll: Math.round(roll)
            };
        }

        function detectEmotion(prediction) {
            const leftEye = prediction.annotations.leftEyeUpper0;
            const rightEye = prediction.annotations.rightEyeUpper0;
            const upperLip = prediction.annotations.lipsUpperOuter;
            const lowerLip = prediction.annotations.lipsLowerOuter;
            
            const leftEyeOpenness = calculateEyeOpenness(leftEye);
            const rightEyeOpenness = calculateEyeOpenness(rightEye);
            const mouthShape = calculateMouthShape(upperLip, lowerLip);
            
            let emotion = "neutral";
            if (mouthShape > 0.7 && leftEyeOpenness > 0.6 && rightEyeOpenness > 0.6) {
                emotion = "happy";
            } else if (mouthShape < 0.3) {
                emotion = "sad";
            } else if (leftEyeOpenness < 0.3 && rightEyeOpenness < 0.3) {
                emotion = "sleepy";
            }
            
            document.getElementById('emotionData').innerHTML = `
                <div style="font-family: monospace; line-height: 1.6">
                    Current Emotion: ${emotion}<br>
                    Eye Openness: ${((leftEyeOpenness + rightEyeOpenness) / 2).toFixed(2)}<br>
                    Mouth Shape: ${mouthShape.toFixed(2)}
                </div>
            `;
        }

        function detectGestures(prediction) {
            const pose = calculateHeadPose(prediction);
            const gestureIndicator = document.getElementById('gestureIndicator');
            const gestureType = document.getElementById('gestureType');
            
            if (Math.abs(pose.yaw) > 30) {
                gestureIndicator.style.display = 'block';
                gestureType.textContent = pose.yaw > 0 ? 'Head Turn Right' : 'Head Turn Left';
            } else if (Math.abs(pose.pitch) > 20) {
                gestureIndicator.style.display = 'block';
                gestureType.textContent = pose.pitch > 0 ? 'Head Nod Down' : 'Head Nod Up';
            } else {
                gestureIndicator.style.display = 'none';
            }
        }

        function updateRecordingUI(isRecording) {
            const recordingIndicator = </antArtifact>
            function updateRecordingUI(isRecording) {
            const recordingIndicator = document.getElementById('recordingIndicator');
            recordingIndicator.style.display = isRecording ? 'block' : 'none';
            recordButton.textContent = isRecording ? 'Stop Recording' : 'Start Recording';
            
            if (isRecording) {
                startTime = Date.now();
                recordingInterval = setInterval(updateRecordingTime, 1000);
            } else {
                clearInterval(recordingInterval);
                document.getElementById('recordingTime').textContent = '';
            }
        }

        function updateRecordingTime() {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
            const seconds = (elapsed % 60).toString().padStart(2, '0');
            document.getElementById('recordingTime').textContent = `${minutes}:${seconds}`;
        }

        function updateLandmarkLabels(prediction) {
            const labelsContainer = document.getElementById('landmarksLabels');
            labelsContainer.innerHTML = '';
            
            if (settings.showMesh) {
                const keypoints = prediction.scaledMesh;
                const landmarks = {
                    nose: keypoints[5],
                    leftEye: keypoints[159],
                    rightEye: keypoints[386],
                    mouth: keypoints[13]
                };
                
                for (const [name, point] of Object.entries(landmarks)) {
                    const label = document.createElement('div');
                    label.className = 'landmarks-label';
                    label.textContent = name;
                    label.style.left = `${point[0]}px`;
                    label.style.top = `${point[1]}px`;
                    label.style.display = 'block';
                    labelsContainer.appendChild(label);
                }
            }
        }

        function updateFPS() {
            const now = performance.now();
            const elapsed = now - lastTime;
            if (elapsed >= 1000) {
                document.getElementById('fpsCounter').textContent = Math.round(frameCount * 1000 / elapsed);
                frameCount = 0;
                lastTime = now;
            }
            frameCount++;
        }

        function showToast(message, duration = 3000) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), duration);
        }

        function calculateEyeOpenness(eyePoints) {
            const top = eyePoints[0];
            const bottom = eyePoints[eyePoints.length - 1];
            return Math.abs(top[1] - bottom[1]) / 50; // Normalized value
        }
        
        function calculateMouthShape(upperLip, lowerLip) {
            const top = upperLip[0];
            const bottom = lowerLip[0];
            return Math.abs(top[1] - bottom[1]) / 100; // Normalized value
        }

        function drawFaceMesh(predictions, context, poseDataElement) {
            context.clearRect(0, 0, context.canvas.width, context.canvas.height);
            
            const detectionStatus = document.getElementById('detectionStatus');
            if (predictions.length > 0) {
                detectionStatus.textContent = 'Face Detected';
                detectionStatus.classList.remove('inactive');
                detectionStatus.classList.add('active');
                
                predictions.forEach(prediction => {
                    context.save();
                    context.translate(context.canvas.width/2, context.canvas.height/2);
                    context.rotate(-Math.PI/2);
                    context.translate(-context.canvas.height/2, -context.canvas.width/2);

                    if (settings.mirrorVideo) {
                        context.scale(-1, 1);
                        context.translate(-context.canvas.width, 0);
                    }

                    if (settings.showMesh) {
                        context.strokeStyle = '#60a5fa';
                        context.lineWidth = settings.lineWidth;

                        const keypoints = prediction.scaledMesh;
                        for (let i = 0; i < keypoints.length; i++) {
                            const x = keypoints[i][0];
                            const y = keypoints[i][1];

                            context.beginPath();
                            context.arc(x, y, settings.pointSize, 0, 2 * Math.PI);
                            context.stroke();
                        }
                    }

                    if (settings.showAxes) {
                        const pose = calculateHeadPose(prediction);
                        const nose = prediction.annotations.noseTip[0];
                        const scale = 50;

                        // Draw axes
                        context.lineWidth = 3;
                        
                        // X-axis (red)
                        context.beginPath();
                        context.strokeStyle = '#ef4444';
                        context.moveTo(nose[0], nose[1]);
                        context.lineTo(nose[0] + scale * Math.cos(pose.yaw * Math.PI / 180), nose[1]);
                        context.stroke();

                        // Y-axis (green)
                        context.beginPath();
                        context.strokeStyle = '#22c55e';
                        context.moveTo(nose[0], nose[1]);
                        context.lineTo(nose[0], nose[1] + scale * Math.cos(pose.pitch * Math.PI / 180));
                        context.stroke();

                        if (poseDataElement) {
                            poseDataElement.innerHTML = `
                                <div style="font-family: monospace; line-height: 1.6">
                                    Pitch (up/down): ${pose.pitch}°<br>
                                    Yaw (left/right): ${pose.yaw}°<br>
                                    Roll (tilt): ${pose.roll}°
                                </div>
                            `;
                        }
                    }

                    // Update emotion and gesture detection
                    detectEmotion(prediction);
                    detectGestures(prediction);
                    updateLandmarkLabels(prediction);

                    context.restore();
                });
            } else {
                detectionStatus.textContent = 'No Face Detected';
                detectionStatus.classList.remove('active');
                detectionStatus.classList.add('inactive');
                if (poseDataElement) {
                    poseDataElement.innerHTML = '<div style="color: #ef4444">No face detected</div>';
                }
                document.getElementById('emotionData').innerHTML = '<div style="color: #ef4444">No face detected</div>';
                document.getElementById('gestureIndicator').style.display = 'none';
            }
            
            updateFPS();
        }

        function setupDownload() {
            const downloadBtn = document.getElementById('downloadBtn');
            downloadBtn.addEventListener('click', () => {
                if (recordedChunks.length === 0) {
                    showToast('No recording available to download');
                    return;
                }
                
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'face-tracking-recording.webm';
                document.body.appendChild(a);
                a.click();
                setTimeout(() => {
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                }, 100);
                
                showToast('Recording downloaded successfully');
            });
        }

        function setupRecording() {
            const stream = video.srcObject;
            mediaRecorder = new MediaRecorder(stream, {
                mimeType: 'video/webm;codecs=vp9'
            });
            
            mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = () => {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                const playbackVideo = document.getElementById('playbackVideo');
                playbackVideo.src = URL.createObjectURL(blob);
                document.getElementById('playbackWrapper').style.display = 'block';
                playButton.disabled = false;
                document.getElementById('downloadBtn').disabled = false;
            };

            recordButton.onclick = () => {
                if (!isRecording) {
                    recordedChunks = [];
                    mediaRecorder.start();
                    isRecording = true;
                } else {
                    mediaRecorder.stop();
                    isRecording = false;
                }
                updateRecordingUI(isRecording);
            };

            playButton.onclick = () => {
                const playbackVideo = document.getElementById('playbackVideo');
                if (playbackVideo.paused) {
                    playbackVideo.play();
                    playButton.textContent = 'Pause';
                } else {
                    playbackVideo.pause();
                    playButton.textContent = 'Play';
                }
            };
        }

        function setupSettings() {
            document.getElementById('showMesh').onchange = (e) => {
                settings.showMesh = e.target.checked;
            };
            
            document.getElementById('showAxes').onchange = (e) => {
                settings.showAxes = e.target.checked;
            };
            
            document.getElementById('mirrorVideo').onchange = (e) => {
                settings.mirrorVideo = e.target.checked;
            };
            
            document.getElementById('lineWidth').oninput = (e) => {
                settings.lineWidth = parseInt(e.target.value);
            };
            
            document.getElementById('pointSize').oninput = (e) => {
                settings.pointSize = parseInt(e.target.value);
            };
        }

        async function detectFace() {
            const predictions = await model.estimateFaces({
                input: video,
                returnTensors: false,
                flipHorizontal: false,
                predictIrises: true
            });
            
            drawFaceMesh(predictions, ctx, document.getElementById('poseData'));
            requestAnimationFrame(detectFace);
        }

        async function main() {
            try {
                document.getElementById('startButton').disabled = true;
                document.getElementById('startButton').textContent = 'Loading...';
                
                await loadModel();
                await setupCamera();
                video.play();

                overlay = document.getElementById('overlay');
                ctx = overlay.getContext('2d');

                recordButton = document.getElementById('recordButton');
                playButton = document.getElementById('playButton');
                recordButton.disabled = false;
                
                setupRecording();
                setupSettings();
                setupDownload();
                detectFace();
                
                document.getElementById('startButton').style.display = 'none';
                showToast('Face tracking initialized successfully');
            } catch (error) {
                console.error('Error initializing:', error);
                document.getElementById('startButton').disabled = false;
                document.getElementById('startButton').textContent = 'Retry';
                showToast('Error initializing face tracking. Please try again.', 5000);
            }
        }

        document.getElementById('startButton').onclick = main;
    </script>
</body>
</html>
